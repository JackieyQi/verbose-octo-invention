execute pathogen#infect()
execute pathogen#helptags()

"" :filetype (to show the filetype settings)
filetype off                  " required
set nocompatible              " required
set fileformat=unix

" set the runtime path to include Vundle and initialize
" set rtp+=~/.vim/bundle/Vundle.vim
" call vundle#begin()

" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

"" let Vundle manage Vundle, required
" Plugin 'gmarik/Vundle.vim'

" Add all your plugins here (note older versions of Vundle used Bundle instead of Plugin)


" All of your Plugins must be added before the following line
" call vundle#end()            " required
filetype plugin indent on    " required

let mapleader = ","

" Plugin 'jiangmiao/auto-pairs'

"" languages"
augroup langs
	au!
	au filetype python,lua set foldmethod=indent foldnestmax=2
	au fileType vim set foldmethod=indent foldnestmax=2 sw=2
augroup END

au BufNewFile,BufRead *.py 
                        \ set tabstop=4 |
                        \ set softtabstop=4 |
                        \ set shiftwidth=4 |
                        " \ set textwidth=79 |
                        \ set wrap |
                        \ set expandtab |
                        \ set autoindent |
                        \ set fileformat=unix

au BufNewFile,BufRead *.js,*.html,*.css
                        \ set tabstop=2 |
                        \ set softtabstop=2 |
                        \ set shiftwidth=2

" Plugin 'vim-scripts/indentpython.vim'

highlight BadWhitespace ctermbg=red guibg=darkred
au BufNewFile,BufRead *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

set encoding=utf-8

" Plugin 'Valloric/YouCompleteMe'
let g:ycm_autoclose_preview_window_after_completion=1
map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>

"python with virtualenv support
py3 << EOF
import os
import sys
if 'VIRTUAL_ENV' in os.environ:
  project_base_dir = os.environ['VIRTUAL_ENV']
  activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
  # execfile(activate_this, dict(__file__=activate_this))
  exec(compile(open(activate_this, "rb").read(), activate_this, 'exec'), dict(__file__=activate_this))
EOF

" ale
nnoremap <silent> <leader>aj :ALENext<cr>
nnoremap <silent> <leader>ak :ALEPrevious<cr>
let g:ale_linters = {'go': ['gometalinter']}
let g:go_fmt_fail_silently = 1
let g:ale_echo_msg_format = '%linter% says %s'
let g:go_fmt_command = "goimports"
let g:ale_fixers = {'python': ['black', 'isort'], 'nix': ['nixpkgs-fmt']}
let g:ale_fix_on_save = 1

" Plugin 'scrooloose/syntastic'

" Plugin 'davidhalter/jedi-vim'

" Plugin 'nvie/vim-flake8'
" :retab -> vim convert tab and spaces
let g:syntastic_python_checkers = ['python', 'flake8']
let g:flake8_show_in_gutter=1
highlight link Flake8_Error      Error
highlight link Flake8_Warning    WarningMsg
highlight link Flake8_Complexity WarningMsg
highlight link Flake8_Naming     WarningMsg
highlight link Flake8_PyFlake    WarningMsg

let python_highlight_all=1
syntax enable
syntax on

" Plugin 'jnurmine/Zenburn'
" Plugin 'altercation/vim-colors-solarized'

" if has('gui_running')
"         set background=dark
"         colorscheme solarized
" else
"         colorscheme zenburn
" endif
set termguicolors
colorscheme solarized8_flat

" call togglebg#map("<F5>")

" Plugin 'scrooloose/nerdtree'

" Plugin 'jistr/vim-nerdtree-tabs'

let NERDTreeIgnore=['\.pyc$', '__pycache__', '\~$'] "ignore files in NERDTree
""gt -> next tab"
""{TabNumber}+gt -> toggle to specify tab"
""gT -> previous tab"
"" Press o to open the file in a new buffer or open/close directory.
"""Press t to open the file in a new tab.
"""Press i to open the file in a new horizontal split.
"""Press s to open the file in a new vertical split.
"""Press p to go to parent directory.
"""Press r to refresh the current directory.
"""Press m to launch NERDTree menu inside Vim."

" Plugin 'kien/ctrlp.vim'
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'

set nu
set backspace=indent,eol,start

"" map settings
nnoremap k k
nnoremap j j
nnoremap h h
nnoremap l l

"" split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

"" fold code
"" syntax needs a vim plugin in which the folding information of code language is defined"
"" za - opens a fold at the cursor."
"" zShift+o opens - all folds at the cursor.
"" zc - closes a fold at the cursor.
"" zm - increases the foldlevel by one.
"" zShift+m - closes all open folds.
"" zr - decreases the foldlevel by one.
"" zShift+r - decreases the foldlevel to zero -- all folds will be open."
set foldmethod=indent
" set foldmethod=syntax

"" search word
"" /pattern - search forward for pattern
"" ?pattern - search backward
"" n - repeat forward search
"" N - repeat backward
"" 'shift' key with '*' key - search full word in forward
"" 'shift' key with '#' key - search full word in backward
"" :vimgrep pattern *[**][*.sh] - :cw to enter quickfix list, :cn/:cp to backward/forward"

"" highlight searched word"
" set nohls
set hls

"" del word"
"" dw: del a word from cursor to tail"
"" db: oppsite to 'dw'"
"" b: move the cursor to first"
"" daw: del a whole word"
"" x: del a character"

" Plugin 'tpope/vim-fugitive'
